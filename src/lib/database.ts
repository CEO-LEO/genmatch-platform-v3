// Database configuration and utilities for GenMatch Platform

import { PrismaClient } from '@prisma/client';

// Global variable to prevent multiple instances in development
declare global {
  var __prisma: PrismaClient | undefined;
}

// Create Prisma client instance
export const prisma = globalThis.__prisma || new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  errorFormat: 'pretty',
});

// Store in global variable in development
if (process.env.NODE_ENV === 'development') {
  globalThis.__prisma = prisma;
}

// Database connection utilities
export async function connectDatabase() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    throw error;
  }
}

export async function disconnectDatabase() {
  try {
    await prisma.$disconnect();
    console.log('‚úÖ Database disconnected successfully');
  } catch (error) {
    console.error('‚ùå Database disconnection failed:', error);
  }
}

// Database health check
export async function checkDatabaseHealth() {
  try {
    await prisma.$queryRaw`SELECT 1`;
    return { status: 'healthy', timestamp: new Date().toISOString() };
  } catch (error) {
    return { status: 'unhealthy', error: error.message, timestamp: new Date().toISOString() };
  }
}

// Database transaction utilities
export async function withTransaction<T>(
  fn: (tx: Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>) => Promise<T>
): Promise<T> {
  return await prisma.$transaction(fn);
}

// Database seeding utilities
export async function seedDatabase() {
  try {
    console.log('üå± Starting database seeding...');
    
    // Seed categories
    await seedCategories();
    
    // Seed sample users
    await seedSampleUsers();
    
    // Seed sample tasks
    await seedSampleTasks();
    
    // Seed achievements
    await seedAchievements();
    
    console.log('‚úÖ Database seeding completed successfully');
  } catch (error) {
    console.error('‚ùå Database seeding failed:', error);
    throw error;
  }
}

async function seedCategories() {
  const categories = [
    { id: 'HOSPITAL', name: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', description: '‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û, ‡∏£‡∏±‡∏ö‡∏¢‡∏≤', icon: 'üè•', color: '#EF4444' },
    { id: 'TEMPLE', name: '‡∏ß‡∏±‡∏î', description: '‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç, ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤', icon: 'üïç', color: '#F59E0B' },
    { id: 'EXERCISE', name: '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', description: '‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô, ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏µ‡∏¨‡∏≤', icon: 'üí™', color: '#10B981' },
    { id: 'REPAIR', name: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°', description: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á', icon: 'üîß', color: '#3B82F6' },
  ];

  for (const category of categories) {
    await prisma.category.upsert({
      where: { id: category.id },
      update: category,
      create: category,
    });
  }
}

async function seedSampleUsers() {
  const users = [
    {
      id: 'user_student_1',
      name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
      email: 'somchai@example.com',
      phone: '0812345678',
      userType: 'STUDENT',
      studentId: '6400000001',
      university: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.8,
      totalHours: 25,
      completedTasks: 8,
      isVerified: true,
    },
    {
      id: 'user_student_2',
      name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ',
      email: 'somying@example.com',
      phone: '0823456789',
      userType: 'STUDENT',
      studentId: '6400000002',
      university: '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.6,
      totalHours: 18,
      completedTasks: 6,
      isVerified: true,
    },
    {
      id: 'user_elderly_1',
      name: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏£‡∏±‡∏Å‡∏î‡∏µ',
      email: 'yaisomsri@example.com',
      phone: '0834567890',
      userType: 'ELDERLY',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.9,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
    {
      id: 'user_elderly_2',
      name: '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∏‡∏á‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
      email: 'lungsomchai@example.com',
      phone: '0845678901',
      userType: 'ELDERLY',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.7,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
  ];

  for (const user of users) {
    await prisma.user.upsert({
      where: { id: user.id },
      update: user,
      create: user,
    });
  }
}

async function seedSampleTasks() {
  const tasks = [
    {
      id: 'task_1',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏• ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567 ‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.',
      category: 'HOSPITAL',
      status: 'PENDING',
      location: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏•, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      budget: 3,
      hours: 3,
      priority: 'MEDIUM',
      difficulty: 'EASY',
      estimatedDuration: 180,
      creatorId: 'user_elderly_1',
      scheduledDate: '2024-01-15',
      scheduledTime: '09:00',
      requirements: ['‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡∏î‡∏ó‡∏ô'],
      tags: ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏'],
    },
    {
      id: 'task_2',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏°',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏° ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567 ‡πÄ‡∏ß‡∏•‡∏≤ 8:00 ‡∏ô.',
      category: 'TEMPLE',
      status: 'PENDING',
      location: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏°, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      budget: 2,
      hours: 2,
      priority: 'LOW',
      difficulty: 'EASY',
      estimatedDuration: 120,
      creatorId: 'user_elderly_2',
      scheduledDate: '2024-01-20',
      scheduledTime: '08:00',
      requirements: ['‡πÉ‡∏à‡∏î‡∏µ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡πÉ‡∏ô‡∏®‡∏≤‡∏™‡∏ô‡∏≤'],
      tags: ['‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç', '‡∏ß‡∏±‡∏î', '‡∏®‡∏≤‡∏™‡∏ô‡∏≤'],
    },
    {
      id: 'task_3',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 6:00 ‡∏ô.',
      category: 'EXERCISE',
      status: 'PENDING',
      location: '‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      budget: 2,
      hours: 2,
      priority: 'MEDIUM',
      difficulty: 'EASY',
      estimatedDuration: 120,
      creatorId: 'user_elderly_1',
      scheduledDate: '2024-01-27',
      scheduledTime: '06:00',
      requirements: ['‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡∏î‡∏ó‡∏ô'],
      tags: ['‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏™‡∏ß‡∏ô', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'],
    },
    {
      id: 'task_4',
      title: '‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏°‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏Å ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô',
      category: 'REPAIR',
      status: 'PENDING',
      location: '‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      budget: 4,
      hours: 2,
      priority: 'HIGH',
      difficulty: 'MODERATE',
      estimatedDuration: 120,
      creatorId: 'user_elderly_2',
      scheduledDate: '2024-01-18',
      scheduledTime: '14:00',
      requirements: ['‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô', '‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'],
      tags: ['‡∏ã‡πà‡∏≠‡∏°', '‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥', '‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á'],
    },
  ];

  for (const task of tasks) {
    await prisma.task.upsert({
      where: { id: task.id },
      update: task,
      create: task,
    });
  }
}

async function seedAchievements() {
  const achievements = [
    {
      id: 'achievement_1',
      title: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
      icon: 'üåü',
      category: 'VOLUNTEER',
      level: 'BRONZE',
      points: 10,
      requirement: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      rarity: 'COMMON',
    },
    {
      id: 'achievement_2',
      title: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üèÜ',
      category: 'VOLUNTEER',
      level: 'SILVER',
      points: 50,
      requirement: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      rarity: 'RARE',
    },
    {
      id: 'achievement_3',
      title: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏µ',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üëë',
      category: 'VOLUNTEER',
      level: 'GOLD',
      points: 100,
      requirement: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      rarity: 'EPIC',
    },
    {
      id: 'achievement_4',
      title: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ä‡∏∏‡∏°‡∏ä‡∏ô',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô',
      icon: 'üèòÔ∏è',
      category: 'COMMUNITY',
      level: 'BRONZE',
      points: 20,
      requirement: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      rarity: 'COMMON',
    },
    {
      id: 'achievement_5',
      title: '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üè•',
      category: 'SKILL',
      level: 'SILVER',
      points: 75,
      requirement: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      rarity: 'RARE',
    },
  ];

  for (const achievement of achievements) {
    await prisma.achievement.upsert({
      where: { id: achievement.id },
      update: achievement,
      create: achievement,
    });
  }
}

// Database backup utilities
export async function createDatabaseBackup() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = `./backups/genmatch_backup_${timestamp}.sql`;
    
    // This would require additional setup for actual database backup
    console.log(`üì¶ Database backup created: ${backupPath}`);
    return { success: true, path: backupPath };
  } catch (error) {
    console.error('‚ùå Database backup failed:', error);
    return { success: false, error: error.message };
  }
}

// Database migration utilities
export async function runMigrations() {
  try {
    console.log('üîÑ Running database migrations...');
    
    // Prisma handles migrations automatically
    await prisma.$executeRaw`SELECT 1`;
    
    console.log('‚úÖ Database migrations completed');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Database migrations failed:', error);
    return { success: false, error: error.message };
  }
}

// Database cleanup utilities
export async function cleanupDatabase() {
  try {
    console.log('üßπ Cleaning up database...');
    
    // Clean up old records, logs, etc.
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    // Example cleanup operations
    // await prisma.log.deleteMany({
    //   where: { createdAt: { lt: thirtyDaysAgo } }
    // });
    
    console.log('‚úÖ Database cleanup completed');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Database cleanup failed:', error);
    return { success: false, error: error.message };
  }
}

// Database performance utilities
export async function getDatabaseStats() {
  try {
    const stats = {
      users: await prisma.user.count(),
      tasks: await prisma.task.count(),
      achievements: await prisma.achievement.count(),
      categories: await prisma.category.count(),
      timestamp: new Date().toISOString(),
    };
    
    return stats;
  } catch (error) {
    console.error('‚ùå Failed to get database stats:', error);
    return null;
  }
}

// Export database utilities
export {
  prisma as db,
  connectDatabase,
  disconnectDatabase,
  checkDatabaseHealth,
  withTransaction,
  seedDatabase,
  createDatabaseBackup,
  runMigrations,
  cleanupDatabase,
  getDatabaseStats,
};
