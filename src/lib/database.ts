// Database configuration and utilities for GenMatch Platform

import { PrismaClient } from '@prisma/client';

// Global variable to prevent multiple instances in development
declare global {
  var __prisma: PrismaClient | undefined;
}

// Create Prisma client instance
export const prisma = globalThis.__prisma || new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  errorFormat: 'pretty',
});

// Store in global variable in development
if (process.env.NODE_ENV === 'development') {
  globalThis.__prisma = prisma;
}

// Database connection utilities
export async function connectDatabase() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    throw error;
  }
}

export async function disconnectDatabase() {
  try {
    await prisma.$disconnect();
    console.log('‚úÖ Database disconnected successfully');
  } catch (error) {
    console.error('‚ùå Database disconnection failed:', error);
  }
}

// Database health check
export async function checkDatabaseHealth() {
  try {
    await prisma.$queryRaw`SELECT 1`;
    return { status: 'healthy', timestamp: new Date().toISOString() };
  } catch (error) {
    return { status: 'unhealthy', error: error instanceof Error ? error.message : 'Unknown error', timestamp: new Date().toISOString() };
  }
}

// Database transaction utilities
export async function withTransaction<T>(
  fn: (tx: any) => Promise<T>
): Promise<T> {
  return await prisma.$transaction(fn);
}

// Database seeding utilities
export async function seedDatabase() {
  try {
    console.log('üå± Starting database seeding...');
    
    // Seed sample users
    await seedSampleUsers();
    
    // Seed sample tasks
    await seedSampleTasks();
    
    // Seed achievements
    await seedAchievements();
    
    console.log('‚úÖ Database seeding completed successfully');
  } catch (error) {
    console.error('‚ùå Database seeding failed:', error);
    throw error;
  }
}

// Note: Categories are now stored as string values in tasks, not separate model

async function seedSampleUsers() {
  const users = [
    {
      id: 'user_student_1',
      firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
      lastName: '‡πÉ‡∏à‡∏î‡∏µ', 
      email: 'somchai@example.com',
      password: '$2a$12$dummy.password.hash.for.seeding.data',
      phone: '0812345678',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      userType: 'STUDENT',
      studentId: '6400000001',
      university: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•',
      rating: 4.8,
      totalHours: 25,
      completedTasks: 8,
      isVerified: true,
    },
    {
      id: 'user_student_2',
      firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
      lastName: '‡∏£‡∏±‡∏Å‡∏î‡∏µ',
      email: 'somying@example.com',
      password: '$2a$12$dummy.password.hash.for.seeding.data',
      phone: '0823456789',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      userType: 'STUDENT',
      studentId: '6400000002',
      university: '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
      rating: 4.6,
      totalHours: 18,
      completedTasks: 6,
      isVerified: true,
    },
    {
      id: 'user_elderly_1',
      firstName: '‡∏™‡∏°‡∏®‡∏£‡∏µ',
      lastName: '‡∏£‡∏±‡∏Å‡∏î‡∏µ',
      email: 'yaisomsri@example.com',
      password: '$2a$12$dummy.password.hash.for.seeding.data',
      phone: '0834567890',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      userType: 'ELDERLY',
      rating: 4.9,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
    {
      id: 'user_elderly_2',
      firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
      lastName: '‡πÉ‡∏à‡∏î‡∏µ',
      email: 'lungsomchai@example.com',
      password: '$2a$12$dummy.password.hash.for.seeding.data',
      phone: '0845678901',
      address: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      userType: 'ELDERLY',
      rating: 4.7,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
  ];

  for (const user of users) {
    await prisma.user.upsert({
      where: { id: user.id },
      update: user,
      create: user,
    });
  }
}

async function seedSampleTasks() {
  const tasks = [
    {
      id: 'task_1',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏• ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567 ‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.',
      category: 'HOSPITAL',
      status: 'PENDING',
      address: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏•',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      budget: 3,
      volunteerHours: 3,
      estimatedHours: 3,
      priority: 'MEDIUM',
      difficulty: 'EASY',
      creatorId: 'user_elderly_1',
      scheduledDate: new Date('2024-01-15'),
      scheduledTime: '09:00',
      requirements: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•, ‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡∏î‡∏ó‡∏ô',
      tags: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û, ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•, ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏',
    },
    {
      id: 'task_2',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏°',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏° ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567 ‡πÄ‡∏ß‡∏•‡∏≤ 8:00 ‡∏ô.',
      category: 'TEMPLE',
      status: 'PENDING',
      address: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏°',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      budget: 2,
      volunteerHours: 2,
      estimatedHours: 2,
      priority: 'LOW',
      difficulty: 'EASY',
      creatorId: 'user_elderly_2',
      scheduledDate: new Date('2024-01-20'),
      scheduledTime: '08:00',
      requirements: '‡πÉ‡∏à‡∏î‡∏µ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡πÉ‡∏ô‡∏®‡∏≤‡∏™‡∏ô‡∏≤',
      tags: '‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç, ‡∏ß‡∏±‡∏î, ‡∏®‡∏≤‡∏™‡∏ô‡∏≤',
    },
    {
      id: 'task_3',
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 6:00 ‡∏ô.',
      category: 'EXERCISE',
      status: 'PENDING',
      address: '‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      budget: 2,
      volunteerHours: 2,
      estimatedHours: 2,
      priority: 'MEDIUM',
      difficulty: 'EASY',
      creatorId: 'user_elderly_1',
      scheduledDate: new Date('2024-01-27'),
      scheduledTime: '06:00',
      requirements: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢, ‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡∏î‡∏ó‡∏ô',
      tags: '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢, ‡∏™‡∏ß‡∏ô, ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    },
    {
      id: 'task_4',
      title: '‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏°‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏Å ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô',
      category: 'REPAIR',
      status: 'PENDING',
      address: '‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      budget: 4,
      volunteerHours: 2,
      estimatedHours: 2,
      priority: 'HIGH',
      difficulty: 'MODERATE',
      creatorId: 'user_elderly_2',
      scheduledDate: new Date('2024-01-18'),
      scheduledTime: '14:00',
      requirements: '‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô, ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠',
      tags: '‡∏ã‡πà‡∏≠‡∏°, ‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥, ‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á',
    },
  ];

  for (const task of tasks) {
    await prisma.task.upsert({
      where: { id: task.id },
      update: task,
      create: task,
    });
  }
}

async function seedAchievements() {
  const achievements = [
    {
      id: 'achievement_1',
      name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
      icon: 'üåü',
      category: 'VOLUNTEER_HOURS',
      points: 10,
      userId: 'user_student_1',
    },
    {
      id: 'achievement_2',
      name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üèÜ',
      category: 'TASK_COMPLETION',
      points: 50,
      userId: 'user_student_1',
    },
    {
      id: 'achievement_3',
      name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏µ',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üëë',
      category: 'VOLUNTEER_HOURS',
      points: 100,
      userId: 'user_student_2',
    },
    {
      id: 'achievement_4',
      name: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ä‡∏∏‡∏°‡∏ä‡∏ô',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô',
      icon: 'üèòÔ∏è',
      category: 'SPECIAL',
      points: 20,
      userId: 'user_student_1',
    },
    {
      id: 'achievement_5',
      name: '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      icon: 'üè•',
      category: 'RATING',
      points: 75,
      userId: 'user_student_2',
    },
  ];

  for (const achievement of achievements) {
    await prisma.achievement.upsert({
      where: { id: achievement.id },
      update: achievement,
      create: achievement,
    });
  }
}

// Database backup utilities
export async function createDatabaseBackup() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = `./backups/genmatch_backup_${timestamp}.sql`;
    
    // This would require additional setup for actual database backup
    console.log(`üì¶ Database backup created: ${backupPath}`);
    return { success: true, path: backupPath };
  } catch (error) {
    console.error('‚ùå Database backup failed:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Database migration utilities
export async function runMigrations() {
  try {
    console.log('üîÑ Running database migrations...');
    
    // Prisma handles migrations automatically
    await prisma.$executeRaw`SELECT 1`;
    
    console.log('‚úÖ Database migrations completed');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Database migrations failed:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Database cleanup utilities
export async function cleanupDatabase() {
  try {
    console.log('üßπ Cleaning up database...');
    
    // Clean up old records, logs, etc.
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    // Example cleanup operations
    // await prisma.log.deleteMany({
    //   where: { createdAt: { lt: thirtyDaysAgo } }
    // });
    
    console.log('‚úÖ Database cleanup completed');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Database cleanup failed:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Database performance utilities
export async function getDatabaseStats() {
  try {
    const stats = {
      users: await prisma.user.count(),
      tasks: await prisma.task.count(),
      achievements: await prisma.achievement.count(),
      timestamp: new Date().toISOString(),
    };
    
    return stats;
  } catch (error) {
    console.error('‚ùå Failed to get database stats:', error);
    return null;
  }
}
