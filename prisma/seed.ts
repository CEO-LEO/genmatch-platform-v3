import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Clear existing data
  await prisma.$transaction([
    prisma.taskComment.deleteMany(),
    prisma.review.deleteMany(),
    prisma.achievement.deleteMany(),
    prisma.notification.deleteMany(),
    prisma.message.deleteMany(),
    prisma.task.deleteMany(),
    prisma.user.deleteMany(),
  ])

  console.log('üßπ Cleared existing data')

  // Create sample users
  const student1 = await prisma.user.create({
    data: {
      email: 'student1@example.com',
      password: '$2a$10$example.hash.student1', // In real app, use bcrypt
      userType: 'STUDENT',
      firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
      lastName: '‡πÉ‡∏à‡∏î‡∏µ',
      phone: '0812345678',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10110',
      studentId: '65123456789',
      university: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•',
      major: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
      graduationYear: 2027,
      rating: 4.8,
      totalHours: 45,
      completedTasks: 12,
      isVerified: true,
    },
  })

  const student2 = await prisma.user.create({
    data: {
      email: 'student2@example.com',
      password: '$2a$10$example.hash.student2',
      userType: 'STUDENT',
      firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
      lastName: '‡∏£‡∏±‡∏Å‡∏î‡∏µ',
      phone: '0823456789',
      address: '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10400',
      studentId: '65123456790',
      university: '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
      major: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
      graduationYear: 2026,
      rating: 4.6,
      totalHours: 32,
      completedTasks: 8,
      isVerified: true,
    },
  })

  const elderly1 = await prisma.user.create({
    data: {
      email: 'elderly1@example.com',
      password: '$2a$10$example.hash.elderly1',
      userType: 'ELDERLY',
      firstName: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤',
      lastName: '‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô',
      phone: '0834567890',
      address: '789 ‡∏ñ‡∏ô‡∏ô‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10230',
      emergencyContact: '0845678901',
      medicalConditions: '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á',
      preferences: '‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÉ‡∏à‡∏î‡∏µ, ‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô',
      rating: 4.9,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
  })

  const elderly2 = await prisma.user.create({
    data: {
      email: 'elderly2@example.com',
      password: '$2a$10$example.hash.elderly2',
      userType: 'ELDERLY',
      firstName: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢',
      lastName: '‡πÉ‡∏à‡∏î‡∏µ',
      phone: '0845678901',
      address: '321 ‡∏ñ‡∏ô‡∏ô‡∏ß‡∏¥‡∏†‡∏≤‡∏ß‡∏î‡∏µ',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10900',
      emergencyContact: '0856789012',
      medicalConditions: '‡πÑ‡∏°‡πà‡∏°‡∏µ',
      preferences: '‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤‡πÜ, ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô',
      rating: 4.7,
      totalHours: 0,
      completedTasks: 0,
      isVerified: true,
    },
  })

  console.log('üë• Created sample users')

  // Create sample tasks
  const task1 = await prisma.task.create({
    data: {
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏• ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡πÉ‡∏à‡∏î‡∏µ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô',
      category: 'HOSPITAL',
      status: 'PENDING',
      priority: 'MEDIUM',
      difficulty: 'EASY',
      address: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏•',
      city: '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
      province: '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
      postalCode: '73170',
      scheduledDate: new Date('2024-02-15'),
      scheduledTime: '09:00',
      estimatedHours: 4,
      volunteerHours: 4,
      requirements: '‡πÉ‡∏à‡∏î‡∏µ, ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô, ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏¥‡∏î‡∏•',
      creatorId: elderly1.id,
    },
  })

  const task2 = await prisma.task.create({
    data: {
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏°‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏î‡∏µ',
      category: 'TEMPLE',
      status: 'ACCEPTED',
      priority: 'LOW',
      difficulty: 'EASY',
      address: '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏®‡∏≤‡∏™‡∏î‡∏≤‡∏£‡∏≤‡∏°',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10200',
      scheduledDate: new Date('2024-02-10'),
      scheduledTime: '08:00',
      estimatedHours: 3,
      volunteerHours: 3,
      requirements: '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß, ‡∏°‡∏µ‡∏°‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏î‡∏µ, ‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏∏‡∏†‡∏≤‡∏û',
      creatorId: elderly2.id,
      accepterId: student1.id,
      acceptedAt: new Date('2024-02-08'),
    },
  })

  const task3 = await prisma.task.create({
    data: {
      title: '‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ',
      description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
      category: 'EXERCISE',
      status: 'IN_PROGRESS',
      priority: 'MEDIUM',
      difficulty: 'EASY',
      address: '‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10330',
      scheduledDate: new Date('2024-02-12'),
      scheduledTime: '17:00',
      estimatedHours: 2,
      volunteerHours: 2,
      requirements: '‡∏ä‡∏≠‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢, ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ, ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô',
      creatorId: elderly1.id,
      accepterId: student2.id,
      acceptedAt: new Date('2024-02-10'),
      startedAt: new Date('2024-02-12'),
    },
  })

  const task4 = await prisma.task.create({
    data: {
      title: '‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß',
      description: '‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏£‡∏±‡πà‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠',
      category: 'REPAIR',
      status: 'COMPLETED',
      priority: 'HIGH',
      difficulty: 'MEDIUM',
      address: '‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      postalCode: '10230',
      scheduledDate: new Date('2024-02-05'),
      scheduledTime: '14:00',
      estimatedHours: 2,
      volunteerHours: 2,
      requirements: '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥, ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠, ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå',
      creatorId: elderly1.id,
      accepterId: student1.id,
      acceptedAt: new Date('2024-02-03'),
      startedAt: new Date('2024-02-05'),
      completedAt: new Date('2024-02-05'),
    },
  })

  console.log('üìã Created sample tasks')

  // Create sample achievements
  const achievements = await Promise.all([
    prisma.achievement.create({
      data: {
        name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
        description: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å',
        icon: 'üéØ',
        category: 'TASK_COMPLETION',
        points: 10,
        isUnlocked: true,
        unlockedAt: new Date('2024-01-15'),
        userId: student1.id,
      },
    }),
    prisma.achievement.create({
      data: {
        name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÉ‡∏à‡∏î‡∏µ',
        description: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à 5 ‡∏î‡∏≤‡∏ß',
        icon: '‚≠ê',
        category: 'RATING',
        points: 20,
        isUnlocked: true,
        unlockedAt: new Date('2024-01-20'),
        userId: student1.id,
      },
    }),
    prisma.achievement.create({
      data: {
        name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
        description: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤ 10 ‡∏á‡∏≤‡∏ô',
        icon: 'üèÜ',
        category: 'TASK_COMPLETION',
        points: 50,
        isUnlocked: true,
        unlockedAt: new Date('2024-02-01'),
        userId: student1.id,
      },
    }),
    prisma.achievement.create({
      data: {
        name: '‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡πÉ‡∏à‡∏î‡∏µ',
        description: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à 5 ‡∏î‡∏≤‡∏ß',
        icon: '‚≠ê',
        category: 'RATING',
        points: 20,
        isUnlocked: true,
        unlockedAt: new Date('2024-01-25'),
        userId: student2.id,
      },
    }),
  ])

  console.log('üèÜ Created sample achievements')

  // Create sample reviews
  const reviews = await Promise.all([
    prisma.review.create({
      data: {
        rating: 5,
        comment: '‡πÄ‡∏î‡πá‡∏Å‡πÜ ‡πÉ‡∏à‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏û‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ',
        authorId: elderly1.id,
        recipientId: student1.id,
        taskId: task4.id,
      },
    }),
    prisma.review.create({
      data: {
        rating: 5,
        comment: '‡∏û‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏°‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏∏‡∏†‡∏≤‡∏û',
        authorId: elderly2.id,
        recipientId: student1.id,
        taskId: task2.id,
      },
    }),
  ])

  console.log('‚≠ê Created sample reviews')

  // Create sample notifications
  const notifications = await Promise.all([
    prisma.notification.create({
      data: {
        title: '‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
        message: '‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        type: 'TASK_UPDATE',
        priority: 'NORMAL',
        userId: student1.id,
        taskId: task1.id,
      },
    }),
    prisma.notification.create({
      data: {
        title: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        message: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ',
        type: 'TASK_UPDATE',
        priority: 'NORMAL',
        userId: elderly1.id,
        taskId: task4.id,
      },
    }),
  ])

  console.log('üîî Created sample notifications')

  // Create sample messages
  const messages = await Promise.all([
    prisma.message.create({
      data: {
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö',
        messageType: 'TEXT',
        senderId: student1.id,
        receiverId: elderly1.id,
        taskId: task4.id,
      },
    }),
    prisma.message.create({
      data: {
        content: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö?',
        messageType: 'TEXT',
        senderId: elderly1.id,
        receiverId: student1.id,
        taskId: task4.id,
      },
    }),
  ])

  console.log('üí¨ Created sample messages')

  console.log('‚úÖ Database seeding completed successfully!')
  console.log(`üìä Created ${achievements.length} achievements`)
  console.log(`üìã Created ${reviews.length} reviews`)
  console.log(`üîî Created ${notifications.length} notifications`)
  console.log(`üí¨ Created ${messages.length} messages`)
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
